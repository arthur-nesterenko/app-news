{"version":3,"sources":["shared/components/loader/loader.tsx","shared/components/loader/index.ts","shared/components/navbar/nav-item.tsx","shared/components/navbar/country-button.tsx","shared/components/navbar/navbar.tsx","shared/components/navbar/index.ts","shared/components/alert/alert.tsx","shared/components/error-boundary/index.tsx","screens/index.ts","shared/components/header/header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loader","className","NavItem","props","activeClassName","CountryButton","code","title","isMatch","useRouteMatch","replace","useHistory","pathname","useLocation","path","disabled","onClick","cx","includes","Navbar","items","countries","map","item","index","key","Alert","text","children","role","ErrorBoundary","state","error","tryAgain","setState","this","message","React","PureComponent","routes","component","lazy","exact","Header","useParams","useMemo","baseitems","to","generateItemsByCode","App","basename","process","fallback","route","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f7292ec.chunk.js","sourcesContent":["import React from 'react'\n\n\nconst Loader = () => {\n\n\n    return <div className='text-center'>\n        <span className='text-2xl'>Loading</span>\n    </div>\n}\n\nexport default Loader\n","export {default} from './loader'\n","import React, {FunctionComponent} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport {INavItem} from './types'\n\nconst NavItem: FunctionComponent<INavItem> = (props) => <NavLink\n    activeClassName='text-teal-900'\n    className=\" text-left sm:text-center  block mt-4 lg:inline-block lg:mt-0 text-teal-200 hover:text-white mr-4\" {...props} />\n\nexport default NavItem\n","import React, {FunctionComponent} from 'react'\nimport cx from 'classnames'\nimport {ICountryButton} from './types'\nimport {useHistory, useLocation, useRouteMatch} from 'react-router-dom'\n\n\nconst CountryButton: FunctionComponent<ICountryButton> = ({code, title,}: any) => {\n    const isMatch = useRouteMatch('/:code/news/:id')\n    const {replace} = useHistory()\n    const {pathname} = useLocation()\n\n    const path = pathname.replace(/(?:us|gb)/, code)\n\n    return <button disabled={isMatch !== null}\n                   onClick={() => replace(path)}\n                   className={cx('text-white font-bold py-2 px-4 outline-none  focus:outline-none',\n                       {\"bg-teal-700  cursor-not-allowed\": isMatch === null && pathname.includes(code)},\n                       [isMatch !== null ? 'bg-gray-500 bg-gray-600 cursor-not-allowed' : 'bg-teal-600 hover:bg-teal-700'],\n                   )}>\n        {title}\n    </button>\n}\n\n\nexport default CountryButton\n","import React, {FunctionComponent} from 'react'\n\nimport NavItem from \"./nav-item\";\nimport {INavBar} from './types'\nimport CountryButton from './country-button'\n\nconst Navbar: FunctionComponent<INavBar> = ({items, countries}) => {\n\n\n    return <nav className=\"flex items-center justify-between flex-wrap bg-teal-500 p-6\">\n        <div className=\"w-full block flex-grow lg:flex lg:items-center lg:w-auto\">\n            <div className=\"text-sm lg:flex-grow\">\n                {items.map((item, index) => <NavItem key={index} {...item}/>)}\n            </div>\n            <div>\n                {countries.map((item, index) => <CountryButton key={index} {...item}/>)}\n            </div>\n        </div>\n    </nav>\n}\n\nexport default Navbar\n","export {default} from './navbar'\nexport * from './types'\n","import React, {FunctionComponent} from \"react\";\n\n\ninterface IAlert {\n    text: string;\n}\n\nconst Alert: FunctionComponent<IAlert> = ({text, children}) => {\n    return (\n        <div\n            className=\"bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative\"\n            role=\"alert\"\n        >\n            <strong className=\"font-bold\">{text}</strong>\n            <div>{children}</div>\n        </div>\n    );\n};\n\n\nexport default Alert;\n","import React from 'react';\nimport Alert from \"../alert\";\n\nclass ErrorBoundary extends React.PureComponent<any, any> {\n    state = {error: null};\n\n    static getDerivedStateFromError(error: any) {\n        return {error};\n    }\n\n    tryAgain = () => this.setState({error: null});\n\n    render() {\n\n        return this.state.error ? (\n// @ts-ignore\n            <Alert text={this.state.error.message}>\n                <button className=\"btn bg-red-500 hover:bg-red-400 text-white rounded\" onClick={this.tryAgain}>\n                    try again\n                </button>\n            </Alert>\n        ) : (\n            this.props.children\n        );\n    }\n\n}\n\nexport default ErrorBoundary;\n","import React from 'react'\nimport {RouteProps} from 'react-router-dom'\n\nconst HomeScreen = React.lazy(() => import('./home'));\nconst NewsDetail = React.lazy(() => import('./news-detail'));\nconst Categories = React.lazy(() => import('./categories'));\nconst Category = React.lazy(() => import('./category'));\nconst Search = React.lazy(() => import('./search'));\n\n\nconst routes: RouteProps[] = [{\n    component: HomeScreen,\n    exact: true,\n    path: '/:code'\n}, {\n    component: NewsDetail,\n    exact: true,\n    path: '/:code/news/:id'\n},\n    {\n        component: Categories,\n        exact: true,\n        path: '/:code/categories'\n    }, {\n        component: Category,\n        exact: true,\n        path: '/:code/categories/:category'\n    }, {\n        component: Search,\n        exact: true,\n        path: '/:code/search'\n    }];\n\n\nexport default routes\n","import React from 'react'\nimport Navbar, {ICountryButton, INavItem} from \"./../navbar\";\nimport {useParams} from 'react-router-dom'\n\n\nconst generateItemsByCode = (code: 'us' | 'gb' = 'us'): INavItem[] => {\n    const baseitems: INavItem[] = [{\n        children: 'Top News',\n        to: '/'\n    }, {\n        children: 'Categories',\n        to: '/categories'\n    }, {\n        children: 'Search',\n        to: '/search'\n    }]\n\n    return baseitems.map(item => ({...item, to: `/${code}${item.to}`}))\n}\n\nconst countries: ICountryButton[] = [\n    {\n        title: 'GB',\n        code: 'gb',\n\n    },\n    {\n        title: 'US',\n        code: 'us'\n    }\n];\n\nconst Header = () => {\n\n    const {code} = useParams<{ code: 'gb' | 'us' }>();\n\n    const items = React.useMemo(() => generateItemsByCode(code as any), [code])\n    return <header>\n        <Navbar items={items} countries={countries}/>\n    </header>\n}\n\nexport default Header\n","import React, {Suspense} from 'react';\nimport ErrorBoundary from \"./shared/components/error-boundary\";\nimport {BrowserRouter as Router, Redirect, Route, Switch} from 'react-router-dom'\nimport routes from './screens'\nimport Header from './shared/components/header'\nimport Loader from 'shared/components/loader'\n\n\nconst App: React.FC = () => {\n    return (\n        <div className='container mx-auto mt-20 px-5'>\n            <ErrorBoundary>\n                <Router basename={process.env.PUBLIC_URL}>\n                    <Header/>\n                    <main className='bg-gray-200 p-2'>\n                        <Suspense fallback={<Loader/>}>\n                            <Switch>\n                                {routes.map((route, index) => <Route key={index}{...route}/>)}\n                                <Redirect to='/us'/>\n                            </Switch>\n                        </Suspense>\n                    </main>\n                </Router>\n            </ErrorBoundary>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/styles/app.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}